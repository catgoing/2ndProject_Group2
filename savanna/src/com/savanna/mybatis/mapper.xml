<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mystudy">

	
	<select id="bookCount" resultType="int">
		SELECT COUNT(*) FROM BOOKS
	</select>
	
	<select id="bookList" resultType="com.savanna.model.vo.BookVO">
		SELECT book_no
				, book_name
				, writer
				, publisher
				, pub_date
				, price
				, book_desc
				, NVL(stock, 0)
				, category
				FROM BOOKS ORDER BY BOOK_NO
	</select>
	
	<select id="pagedBookList" resultType="com.savanna.model.vo.BookVO"
			parameterType="Map">
		SELECT *
		  FROM (SELECT ROWNUM AS PAGING_INDEX, ORDERED_BOOKS.*
		          FROM (SELECT book_no
							, book_name
							, writer
							, publisher
							, pub_date
							, price
							, book_desc
							, stock
							, category
		                  FROM BOOKS
		                 ORDER BY BOOK_NO DESC
		               ) ORDERED_BOOKS
		       )
		 WHERE PAGING_INDEX BETWEEN #{begin} AND #{end}
	</select>
	
	<select id="pagedDatelessBookList" resultType="com.savanna.model.vo.BookVO"
			parameterType="Map">
		SELECT *
		  FROM (SELECT ROWNUM AS PAGING_INDEX, ORDERED_BOOKS.*
		          FROM (SELECT book_no
							, book_name
							, writer
							, publisher
							, price
							, book_desc
							, stock
							, category
		                  FROM BOOKS
		                 ORDER BY BOOK_NO DESC
		               ) ORDERED_BOOKS
		       )
		 WHERE PAGING_INDEX BETWEEN #{begin} AND #{end}
	</select>
	
	<update id="updatebook" parameterType="com.savanna.model.vo.BookVO">
		UPDATE BOOKS
		SET  book_name = #{book_name }
			, writer = #{writer }
			, publisher = #{publisher }
			, pub_date = #{pub_date }
			, price = #{price }
			, book_desc = #{book_desc }
			, stock = #{stock }
			, category = #{category }
		WHERE book_no = #{book_no }
	</update>
	
	<insert id="insertbook" parameterType="com.savanna.model.vo.BookVO">
		INSERT INTO BOOKS (book_no
						, book_name
						, writer
						, publisher
						, pub_date
						, price
						, book_desc
						, stock
						, category)
		VALUES (book_no_seq.nextval
			 , #{book_name }, #{writer }, #{publisher }, #{pub_date }, #{price }, #{book_desc }, #{stock }, #{category })
	</insert>
	
	<delete id="deletebook" parameterType="int">
		DELETE 
		FROM BOOKS
		WHERE book_no = #{book_no}
	</delete>
	<select id="bookdetail" parameterType="int" resultType="com.savanna.model.vo.BookVO">
		SELECT book_no
			, book_name
			, writer
			, publisher
			, pub_date
			, price
			, book_desc
			, stock
			, category
		FROM BOOKS
		WHERE book_no = #{book_no}
	</select>
	
    <!-- 책번호로 책 한권 검색 -->
	<select id="onebook" parameterType="int" 
			resultType="com.savanna.model.vo.BookVO">
		SELECT * FROM BOOKS WHERE BOOK_NO = #{book_no }
	</select>
	
	<!-- 동적 검색 -->
	<select id="search" parameterType="map"
			resultType="com.savanna.model.vo.BookVO">
		SELECT *
		  FROM BOOKS
		<choose>
			<when test="idx == 0">
				WHERE BOOK_NO = #{keyword}
			</when>
			<when test="idx == 1">
				WHERE BOOK_NAME= INITCAP(#{keyword}) 
			</when>
			<when test="idx == 2">
				WHERE WRITER = UPPER(#{keyword})
			</when>
			<when test="idx == 3">
				WHERE PUBLISHER = #{keyword}
			</when>
			<otherwise>
				WHERE 1 = 2
			</otherwise>
		</choose>
		ORDER BY BOOK_NO	
	
	</select>
	
	<!-- 회원가입 -->
	<select id="signUp" parameterType="MemberVO">
		INSERT INTO MEMBERS
		(ID, PWD, NAME, ADDR, PHONE, EMAIL, MEM_NO, REGDATE)
		VALUES (#{id}, #{pwd}, #{name}, #{addr}, #{phone}, #{email}, MEM_NO_SEQ.NEXTVAL, SYSDATE)
	</select>
	
	<!-- 로그인-->
	<select id="signIn" parameterType="MemberVO" resultType="MemberVO">
		SELECT ID, PWD, NAME, ADDR, PHONE, EMAIL, MEM_NO, REGDATE 
		FROM MEMBERS
		WHERE ID = #{id}
		AND PWD = #{pwd}
	</select>
	
	<!-- 아이디 중복 체크 -->
	<select id="id_check" parameterType="MemberVO" resultType="int">
		SELECT COUNT(*)
		FROM MEMBERS
		WHERE ID = #{id}
	</select>
	
	<!-- 정보 수정 시 패스워드 체크 -->
	<select id="pwd_check" parameterType="MemberVO" resultType="int">
		SELECT COUNT(*) 
		FROM MEMBERS
		WHERE ID = #{id}
		AND PWD = #{pwd}
	</select>

	<!-- 정보수정-->
	<select id="update" parameterType="MemberVO" resultType="MemberVO">
		UPDATE MEMBERS 
		SET NAME = #{name},
			PWD = #{pwd},
			ADDR = #{addr},
			PHONE = #{phone},
			EMAIL = #{email}
		WHERE ID = #{id}	
	</select>
	
	<!-- 회원탈퇴 테이블로 데이터 이동-->
	<select id="withdrawal1" parameterType="MemberVO" resultType="int">
		INSERT INTO WITHDRAWAL(
	    		ID, NAME, ADDR, PHONE, EMAIL, MEM_NO, WITDATE)
		SELECT ID, NAME, ADDR, PHONE, EMAIL, MEM_NO, SYSDATE
		FROM MEMBERS
		WHERE ID = #{id}
	</select>
	<!-- 회원정보 삭제 -->
	<select id="withdrawal2" parameterType="MemberVO" resultType="int">
	 	UPDATE MEMBERS 
		SET NAME = NULL,
			PWD = NULL,
			ADDR = NULL,
			PHONE = NULL,
			EMAIL = NULL,
			REGDATE = NULL,
			STATUS = 1
		WHERE ID = #{id}	
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="inquiryId" parameterType="MemberVO" resultType="string">
		SELECT ID 
		FROM MEMBERS
		WHERE NAME = #{name}
		AND PHONE = #{phone}
		AND STATUS = 0
	</select>
	
	<!-- 패스워드 찾기 -->
	<select id="inquiryPwd" parameterType="MemberVO" resultType="string">
		SELECT PWD 
		FROM MEMBERS
		WHERE ID = #{id}
		AND NAME = #{name}
		AND STATUS = 0
	</select>
	
	<!-- 모든 회원 출력 -->
	<select id="memList" resultType="MemberVO">
	 	SELECT ID, PWD, NAME, ADDR, PHONE, EMAIL, MEM_NO, REGDATE, STATUS
		FROM MEMBERS
		WHERE STATUS = 0
		ORDER BY ID
	</select>
	
	<!-- 전체 회원수 조회 -->
	<select id="memberCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM MEMBERS WHERE STATUS = 0
	</select>
	
	<!-- 페이지에 표시할 데이터 조회 
		parameterType="Map" : begin, end 값 전달 용도
		key-value 형태의 Map 사용 바인드변수명 key가 됨 -->
	<select id="memberList" resultType="MemberVO"
			parameterType="Map">
		SELECT *
		  FROM (SELECT ROWNUM AS R_NUM, M.*
		          FROM (SELECT *
		                  FROM MEMBERS
		                  WHERE STATUS = 0
		                 ORDER BY ID
		               ) M 
		       )
		 WHERE R_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 회원 상세정보-->
	<select id="memDetail" parameterType="string" resultType="MemberVO">
		SELECT ID, PWD, NAME, ADDR, PHONE, EMAIL, MEM_NO, REGDATE 
		FROM MEMBERS
		WHERE ID = #{id}
	</select>	

	<!-- 페이지에 표시할 데이터 조회 
		parameterType="Map" : begin, end 값 전달 용도
		key-value 형태의 Map 사용 바인드변수명 key가 됨 -->
	<select id="reviewList" resultType="com.savanna.model.vo.ReviewVO" parameterType="Map">
		SELECT *
		  FROM (SELECT ROWNUM AS R_NUM, B.*
		          FROM (SELECT *
		                  FROM REVIEWS
		                 ORDER BY REV_NO DESC
		               ) B 
		       )
		 WHERE R_NUM BETWEEN #{begin} AND #{end}
	</select>

	<!-- 전체 게시글 수 조회 -->
	<select id="reviewCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM REVIEWS
	</select>	

	<!-- 게시글 하나 조회(REV_NO 값으로) -->
	<select id="one" parameterType="String" resultType="com.savanna.model.vo.ReviewVO">
		SELECT 
			REV_NO, ID, BOOK_NO, REV_CONTENT, REV_DATE, REV_PWD
		FROM REVIEWS
		WHERE REV_NO = #{rev_no}
	</select>
	
	<select id="review_read" resultType="com.savanna.model.vo.ReviewVO">
		 SELECT 
		   (REV_NO, ID, BOOK_NO, REV_CONTENT, REV_DATE, REV_PWD)
		 FROM REVIEWS
		 WHERE REV_NO = #{rev_no}
	 </select>	
	
	<!-- 게시글 작성 -->
	<insert id="review_insert" parameterType="ReviewVO">
		INSERT INTO REVIEWS
			   (REV_NO, ID, BOOK_NO, REV_CONTENT, REV_DATE, REV_PWD)
		VALUES (REVIEWS_SEQ.NEXTVAL, #{id}, #{book_no}, #{rev_content}, SYSDATE, #{rev_pwd})			   
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="review_update">
		UPDATE REVIEWS SET BOOK_NO =#{book_no}, REV_CONTENT =#{rev_content} 
		WHERE REV_NO = #{rev_no}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="review_delete" parameterType="int">
		DELETE FROM REVIEWS WHERE REV_NO = #{rev_no}
	</delete>
	
	<!-- ========== 댓글처리 ================ -->
	<!-- 게시글에 달린 댓글 조회 -->
	<select id="commList" parameterType="string"
			resultType="com.savanna.model.vo.CommVO">
		SELECT *
		  FROM COMMENTS
		 WHERE REV_NO = #{rev_no}
		 ORDER BY COMM_NO 
	</select>
	
	<!-- 댓글 입력 -->
	<insert id="comm_insert" parameterType="com.savanna.model.vo.CommVO">
		INSERT INTO COMMENTS
		       (COMM_NO, REV_NO, ID, COMM_CONTENT, COMM_DATE, COMM_PWD)
		VALUES (COMMENTS_SEQ.NEXTVAL, #{rev_no}, #{id}, #{comm_content}, SYSDATE, #{comm_pwd})
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="comm_delete" parameterType="int">
		DELETE FROM COMMENTS WHERE COMM_NO = #{comm_no}
	</delete>	
	
    
    <!-- 주소를 가져오기 위한 회원정보조회 -->
	<select id="getmemaddr" parameterType="string" resultType="string">
		SELECT ADDR FROM MEMBERS WHERE ID = #{id}
	</select>
	
	<!-- 장바구니 전체 조회 -->
	<select id="cartlist" parameterType="string"
			resultType="com.savanna.model.vo.CartVO">
		SELECT * 
		 FROM CART
		 WHERE ID = #{id} 
	</select>
	
	<!--  장바구니에서 책번호로 조회 -->
	<select id="cartone" parameterType="map"
			resultType="com.savanna.model.vo.CartVO">
		SELECT * 
		 FROM CART 
		 WHERE BOOK_NO = #{book_no } 
		 AND ID = #{id}
	</select>
	
	<!-- 장바구니에서 중복상품 조회 : 중복없으면 count=(result) -->
	<select id="jungbok" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		 FROM CART 
		 WHERE ID = #{id} 
		 AND BOOK_NO = #{book_no }
	</select>
	
	<!-- 장바구니 내부 전체금액 조회 -->
	<select id="totprice" parameterType="string" resultType="int">
		SELECT NVL(SUM(CART_PRICE * CART_QUAN), 0)
		 FROM CART 
		 WHERE ID = #{id }
	</select>

	<!--  장바구니 물건 추가 -->
	<insert id="insertcart" parameterType="com.savanna.model.vo.CartVO">
		INSERT INTO CART (CART_NO, ID, BOOK_NO, BOOK_NAME, ADDR, 
				CART_PRICE, CART_QUAN)
		VALUES (CARTNO_SEQ.NEXTVAL, #{id}, #{book_no}, #{book_name}, #{addr}, 
				#{cart_price}, #{cart_quan})
	</insert>
	
	<!--  장바구니 수량 변경 -->
	<update id="cartquanupdate" parameterType="map">
		UPDATE CART
		 SET CART_QUAN = #{cart_quan}
	 	 WHERE id = #{id} 
	 	 AND BOOK_NO = #{book_no}
	</update>
	
	<!--  장바구니 내부 물건 삭제 -->
	<delete id="deleteincart" parameterType="map">
		DELETE FROM CART WHERE BOOK_NO = #{book_no} AND ID = #{id}
	</delete>

	<!-- 장바구니 삭제(구매하면 장바구니에서 삭제)--> 
	<delete id="clearcart" parameterType="string">
		DELETE FROM CART WHERE ID = #{id }
	</delete>
	
	<!-- 구매내역에 입력 -->
	<insert id="sendorder" parameterType="com.savanna.model.vo.CartVO">
		INSERT INTO BUY_LIST(BUYLIST_NO, CART_NO, BOOK_NO, BOOK_NAME ,QUAN ,
				PRICE ,ADDR ,ID ,PUR_DATE)
		VALUES (BUYLIST_NO_SEQ.NEXTVAL, #{cart_no}, #{book_no}, #{book_name}, #{cart_quan},
				#{totalPrice}, #{addr}, #{id}, SYSDATE)
	</insert>	
    
</mapper>









